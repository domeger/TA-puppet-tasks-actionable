{"global_settings_builder": {"global_settings": {"customized_settings": [{"required": false, "type": "password", "label": "VictorOps Token", "default_value": "", "format_type": "password", "help_string": "", "value": "", "internal_name": "", "name": "victorops_token"}, {"required": false, "type": "password", "label": "Puppet Enterprise Token", "default_value": "", "format_type": "password", "help_string": "", "value": "", "internal_name": "", "name": "puppet_enterprise_token"}, {"required": false, "type": "text", "label": "Puppet Enterprise Server", "default_value": "", "format_type": "text", "help_string": "", "value": "automate01", "internal_name": "", "name": "puppet_enterprise_server"}, {"required": false, "type": "text", "label": "Port", "default_value": "", "format_type": "text", "help_string": "", "value": "8143", "internal_name": "", "name": "port"}]}}, "basic_builder": {"build_no": 6, "version": "1.0.2", "tab_build_no": "12", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAACC0lEQVRYR+2YTWsTURiFz0lnmiYoYrRpK0oX/RWiSJduRE1DJaIrd4L/pTtXioJFCaYVBEEouNEfUAqlGzeKtYmlXZQaDc49kpREG3JzJ01ipphZDu9973PP+3E/CMunQuo86GcgxGw2jf+VIM/c9qbTLoQBrUDLk7MwXAE54vQjXObc5genXQiDYwwklQAEtUUSPsCzjQUPRCG/PM1ru5+qECqkL4He+yHQoaSOnELSI8SwVwuTdA6IzQ82ZO1K1gS3mS0+D1HVTpPelD20B5kM54orzhkdBj0CqoYRZfDXRWZKq91A2YHeII5KKg2Mtfb/o5LAqL8A4CrAAz/SdyjIMFt6e1QoK1AYh1o6eQY6UQBxpQFVDR90DzL2vS3QR85/22o1R1dAdYd6OfUOMc6GWcRBpzf3eXPrYf+A8pPj8Pj0UPja0fUbqJY+y+kZGG8NRMKp1D8BepW6ABPfAJgcArVSQEOFHImhF+kZ+BFJai2eOo2x5GMQ1/80yDYr6HeVRaYx1pRJJBeb9rN9UA9gaN86vJ/rvLHzuaNOrTxGgfGUVfgRLw5goSlMZZjgFrPF185eZDE4RsePji6K2odMrhtl6oL1RiGju8x+fXbUMP09LjxQ5A75kbsGDYGaMlLNVSZ8AVR/bIgDnGgMGchjQ7sS+j+BClPTIO5ACvGkV3nCXOu9qdPe9BvCCFQ0gPAA5gAAAABJRU5ErkJggg==", "description": "Enable Splunk to run tasks through Puppet Enterprise in response to an alert event.", "appname": "TA-puppet-tasks-actionable", "visible": true, "large_icon": "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAADBklEQVR4Xu2cv2sUQRTHv+9uLyiJxmhCkgObIFY2VtYWikj8cQqHhQi21vYRFLQRLPwRRexEi8QgYiHqv6AoFiJKROQSPdBGJZq9fZI1SJDdnZ3ZXWfu9l27897efPh+3/xgZgkGP749OIT+6oBBaHzI1y9tOomlXHPmkIxMcvBc/QoYp0xiY2M4mKSjiw9zzZlDMgGkgCiABFA2n4mCREGioGwE/r+C+AKoczPyvexdAjAZ/awswzwFp6mxeDEKAt+r3wFwTAAJoISZtCgISFxqCCABpBw2kxerwRSWvl+NTLJu4DpAR8pdpJV4YxrIal5BTgCpAOENOp191Pw0byrCIuLcWayu9I75OTp0mJqtD0V01iSnW4BCSHiHza0dtNuN7Vf3AP1R0mt0gv0u2M0Q0PhZBDhhItkwhrAJoI2J8Y7YzQiQMZjVQL4/sg2+9xJE65Mh2bebFUChi2ZGd4Gqj0AYVCjJqt2sAQoh3R3ejr7aE4C2umo3q4BCSGntBnwEcAuEwNjiy63z1MQvnXjrgLTsptOzqLb+8gZqtr/ppHECkJbddHr3b9tuBqRpNzNM3Q6ocLv1AqC/dqvVnoGo30wqMVG9AiiENDu+AKIxARRDQAAppCGABFC26iEKEgWJgrIREAVl4yc1SBRkriCeHZ0AKi9AlO9h9V5YavDMyE5UvKcADZkj7tG1mMbuohm7blbQqq0eg2jCrPcporoVUKG2WsutGwFp2Kp8m/apbcX8Cp7foEPttymMlGsTa5v2qW3FPA/P32sDzgppK4BS28qBkx5GgHhubApB5bixlglbACTPcyzaam2/DAEVcONw7b+ybCu3ATlgK3cBOWIrRwHxe1T9PbZGq7h66k4NkmPAqg2g8twXOwPma9E4KtMANSKflUZBcttHbvsoJ8hyX0xVT5O+3SEWE4tlsxjzOVR/3ohMEvRdBioHyz2KKfHGNCjNMC+AFDVIAAkgpQbkE11Z5kFKvFKkzRD11Cj2oD4M30++56WLyfu8QAfwQzes6Pa/AUhKlWd3R9gsAAAAAElFTkSuQmCC", "theme": "#000000", "friendly_name": "Puppet Tasks Actionable Alerts for Splunk", "author": "Puppet, Inc.", "tab_version": "2.2.0"}, "validation": {}, "alert_action_builder": {"modular_alerts": [{"parameters": [{"required": true, "type": "", "label": "Severity", "default_value": "INFO", "format_type": "dropdownlist", "help_string": "", "value": "INFO", "possible_values": {"CRITICAL": "CRITICAL", "INFO": "INFO", "ACKNOWLEDGEMENT": "ACKNOWLEDGEMENT"}, "name": "severity"}, {"required": true, "type": "", "label": "Node", "default_value": "", "format_type": "text", "help_string": "", "value": "automate01", "name": "host"}, {"required": true, "type": "", "label": "Environment", "default_value": "production", "format_type": "text", "help_string": "", "value": "production", "name": "environment"}, {"required": true, "type": "", "label": "Task", "default_value": "", "format_type": "text", "help_string": "", "value": "yum_updates::update", "name": "module"}, {"required": false, "type": "", "label": "Parameters", "default_value": "", "format_type": "text", "help_string": "", "value": "", "name": "parameters"}, {"required": true, "type": "", "label": "Description", "default_value": "", "format_type": "text", "help_string": "", "value": "yum update of box", "name": "description"}, {"required": false, "type": "", "label": "Noop", "default_value": 0, "format_type": "checkbox", "help_string": "", "value": 1, "name": "noop"}], "code": "# encoding = utf-8\nimport json\nimport urllib2\nimport requests\nimport sys\n\ndef process_event(helper, *args, **kwargs):\n    \n    victor_ops_token = helper.get_global_setting(\"victorops_token\")\n    alert_entity_id = helper.get_param(\"alert_entity_id\")\n    dropdown_list = helper.get_param(\"severity\")\n    state_message = helper.get_param(\"module\")\n    view_report = helper.get_param(\"severity\")\n    description = helper.get_param(\"description\")\n    parameters = helper.get_param(\"parameters\")\n    node = helper.get_param(\"host\")\n    env = helper.get_param(\"environment\")\n    pe_token = helper.get_global_setting(\"puppet_enterprise_token\")\n    pe_server = helper.get_global_setting(\"puppet_enterprise_server\")\n    pe_port = helper.get_global_setting(\"port\")\n    noop  = helper.get_param(\"noop\")\n    \n    method = 'POST'\n    api_request = 'application/json' \n    \n    urlpe = \"https://\" + pe_server + \":\" + pe_port + \"/orchestrator/v1/command/task\"\n    \n    headers = {\n       'X-Authentication': pe_token,\n       'Content-Type': api_request\n       }\n\n    if noop == 1:\n        data = '{ \"environment\" : \"%s\", \"task\" : \"%s\" ,\"description\" : \"%s\" ,\"params\" :  {%s},\"scope\" : {\"nodes\" : [\"%s\"]}}, \"noop\" : \"true\"' % (env, state_message, description, parameters, node)\n        \n        print >> sys.stderr, \"ERROR Server response: %s\" % data\n    else:\n        data = '{ \"environment\" : \"%s\", \"task\" : \"%s\" ,\"description\" : \"%s\" ,\"params\" :  {%s},\"scope\" : {\"nodes\" : [\"%s\"]}}' % (env, state_message, description, parameters, node)\n    \n        print >> sys.stderr, \"ERROR Server response: %s\" % data\n    \n    response = requests.post(urlpe, headers=headers, data=data, verify=False)\n    \n    if victor_ops_token == \"\":\n        \n        print >> sys.stderr, \"No VictorOps Account Setup\" \n        return\n        \n    else:\n        \n        url = \"https://alert.victorops.com/integrations/generic/20131114/alert/\" + victor_ops_token + \"\"\n            \n        \n        data = dict(\n            message_type=dropdown_list,\n            monitoring_tool='Puppet Tasks',\n            state_message=state_message,\n            job_description=description,\n            entity_id=alert_entity_id,\n            view_report=data,\n            pe_server=pe_server,\n            pe_port=pe_port,\n            node=node\n        )\n        \n        \n        search_name = helper.get_events()\n        entity_id = \"Puppet Tasks Alert: %s\" % search_name\n        \n        view_report = helper.get_param('results_link')\n        \n        helper.log_info(\"Alert action Puppet Tasks VictorOps Alert Action started.\")\n        \n      \n        response = helper.send_http_request(url, \n                                        method, \n                                        parameters=None, \n                                        payload=json.dumps(data),\n                                        headers=headers, \n                                        cookies=None, \n                                        verify=False, \n                                        cert=None,\n                                        timeout=None, \n                                        use_proxy=True)\n        \n        \n        body = json.dumps(data)\n        \n        req = urllib2.Request(url, body, {\"Content-Type\": \"application/json\"})\n        \n        try:\n            res = urllib2.urlopen(req)\n            body = res.read()\n            print >> sys.stderr, \"INFO VictorOps server responded with HTTP status=%d\" % res.code\n            print >> sys.stderr, \"DEBUG VictorOps server response: %s\" % json.dumps(body)\n            return 200 <= res.code < 300\n        except urllib2.HTTPError, e:\n            print >> sys.stderr, \"ERROR Error sending message: %s (%s)\" % (e, str(dir(e)))\n            print >> sys.stderr, \"ERROR Server response: %s\" % e.read()\n            return False\n         \n    \n        return 0\n", "label": "Puppet Enterprise Tasks", "description": "", "uuid": "3756c251c0d441e098e78f186e3a0949", "short_name": "puppet_enterprise_tasks", "largeIcon": "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAAEPUlEQVR4Xu2bSWgUQRSGv57JJJOYOMaEGKOIoHhwicGg4EYMbqC4HLx78+JBBEUPLoiKCh7UsyCKiKIHFVFEUBI8CC4hCnFDUWOCS0zcssw4i9S0Ex2n27G6p5PpmapjqCoq3/zvvar3XmuxWCyGGqYENAXo3+pQgNJYjwKkANlzsMYKikUh+Bmw6b81DQpHgeaxd8phXG0MaKAbbq+DULe9o/lGwsKL4B9tb59hXG0C6BPcXAzBj/aO5gvAkmbwV9rbZxhXK0CWnPSAUlCCm1JQRhXkLYayyYCWvG0kCN+epUa9vPNBgemw8AJ4CpMBfX0OzWsgOpD89/wDNAMaLoG3KBnElyfQtBIiCpACFJeGWRQLKAXppqMADboQuTBfOgXqj6Y66d6XcG8jREN57qRFeP87ggkk4nEb+5F6o8i7KCb7JvKWQOMNKJsouzJr5suZmJVj16yE2r3grwKR/nDZcB6QqAlU1sOcE6581TsPKK4YDWpWQO0e8Fe7SknGgILd0LwWgl1yBhH9AZE+4zVCSWMWwJzjIBJpLhlpUq5RuX8j3AdtB+HtpZT3rL6RB8atghm7XeOTMl/VGOiCuxug6y5gAnjscph1BHxlWW9umQckTCnUA4/2Qvu51NRIQkljl8C0nXpSX2poOlhPgdQqq5MzDyhxEvFcadkE75shFjE+X2EFeP1yZy8ohbmnYMR4uXUWZzsHSCgp/B1ad0D7BYvHM1jmK4dFV6F0Qub2/MdOzgEaVNJHeLgLOq/oTxK7I+cAxZXUCw+2Qudlu3gg5wAJJAJSXzs0rc5ArS3XTCyhGVHKvrUM+jvsqSgnFSSQKEBphKEAKUD2fIdSkFKQUpA9AkpB1vnFL4od0LQKgh+s7yNW5uQ9KByE1m3w5rw9ODkJSESvtv3w+qx6rCbJQ5iV6Bt6tAdenTRJnFkQVM6YWOgztG6HjmsQCxuTKLCQGfSNgvlnXZwwSyTK2g7Bi+OgeQ3gaFA5H6bvgMJyORmJ4qN/jItTrsLntGyGdzfNlVPVAPXHoKjCpUl7kfkTSS7ZTvtwPzw+DK/OmJR9NKhqhLoDUDIu6+EIaZsUDnvgznoQfkRmCKfc36kn6f+uw8dL0LP1wmFRpSvgmAPKVJ/0IFwNqpfCzH1QXOMaOEMDSCgnMBXmnYbiahk9ZsVc55sXqhZB3UEoGe8q5SR+HWcBicbzxutQNikr1GDlEJKANJN7jQh4BpfBvGvBK50EMw+Ax5f8Y/S+gZYtqX2KeQdI9Un/Eobqk/59QTH8bl4BUoD+N6LJRbFALTRcNPja5yk0rVBf+yCal8rr9F7DP4foTey5rz6o+19ZDs7LuzAvS0gBSkNMAcpnQKLIF/oka1TJ8wsC0HgN/BX29hnG1cZhPhrRW+ZsN1169OrDEPU0O8HR+S5XJ049hHsqQGlgK0AKkD17VApKw+8nJnofVoDVGFIAAAAASUVORK5CYII=", "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAACP0lEQVRYR+2YT0gUURzHP+PYtq6ZRlRqYFKEBIGyQUIXmyy0BM+dOwReunWoiwcJOtm5KPBip+oQxBrRWtfC/mAnizIXOtUerMxRZ168fRO70MwwKzO777ADA3PY+b3Pft/vz/eNIYQQaHQZ+gI5NvxeAUIEa0pBaw8YTYlpWlZo9SO8HAd3I3ixtiMw9BjMdC2AlmD+PLjrwYvtOgpncmC2NIDg9FNI74ONIsyPgHCgrgqNLkBLJ6x/h7msBkDWM0jvB/sH5M8B9VYIsyJxHfXc2gvWHOxo0ySpDRO6x+DErcRKv9yHfi3Dq8vg+PQhsQlrBZVHsnH2XISBm2CmYleqDCRcryn6dGp3C95fg8IjwFD3gWEYvAPmzlihos8yOVoWp+DLjFJJzuTuC9Bx3B+oox86raphowPJ0HI7X0/AtxwYUqmQ6/Al6J9KGKgEZcPbq1B4qAmQxPh0FxYnG0DBCjQUCssOdxPeXYev9zXIIQnzRlbYg3CrK1ETL3vZgz7cgM/3yo2xawTaj/krtScLXWcT6kP/RsfyrDc6gL2DcGoWmuO1sxXDdQUWrvibfLlVP5dAbKl/fHAcstOxw8jQFaeOCCa/NFQtOHkbmjNVb0eUF0KAvKleiuKqWJlDYOUg1R4l9rZ+Eww09ESZfLsIL8Y0sLDamfzhvGfyi/Dc0uDUYWaU55FGzFlT+VDXc5lfStYcKD8Kwg6ujpoCOX9gVTY/r8T9sORXj919Nfocs62uEf9L1Zn8+Nf/L+Jf1FqHpO3Qv68AAAAASUVORK5CYII="}, {"parameters": [{"required": true, "type": "", "label": "Severity", "default_value": "INFO", "format_type": "dropdownlist", "help_string": "", "value": "CRITICAL", "possible_values": {"CRITICAL": "CRITICAL", "INFO": "INFO", "ACKNOWLEDGED": "ACKNOWLEDGED"}, "name": "severity"}, {"required": false, "type": "", "label": "Node", "default_value": "", "format_type": "text", "help_string": "", "value": "automate01", "name": "node"}, {"required": true, "type": "", "label": "Description", "default_value": "", "format_type": "text", "help_string": "", "value": "This is a second test", "name": "description"}, {"required": true, "type": "", "label": "Environment", "default_value": "production", "format_type": "text", "help_string": "", "value": "production", "name": "environment"}, {"required": true, "type": "", "label": "Command", "default_value": "", "format_type": "text", "help_string": "", "value": "ntpdate -q 0.pool.ntp.org", "name": "command"}], "code": "# encoding = utf-8\nimport json\nimport urllib2\nimport requests\nimport sys\n\ndef process_event(helper, *args, **kwargs):\n    \n    victor_ops_token = helper.get_global_setting(\"victorops_token\")\n    alert_entity_id = helper.get_param(\"alert_entity_id\")\n    dropdown_list = helper.get_param(\"severity\")\n    state_message = helper.get_param(\"module\")\n    view_report = helper.get_param(\"severity\")\n    command = helper.get_param(\"command\")\n    description = helper.get_param(\"description\")\n    parameters = helper.get_param(\"parameters\")\n    node = helper.get_param(\"node\")\n    env = helper.get_param(\"environment\")\n    pe_token = helper.get_global_setting(\"puppet_enterprise_token\")\n    pe_server = helper.get_global_setting(\"puppet_enterprise_server\")\n    pe_port = helper.get_global_setting(\"port\")\n    \n    method = 'POST'\n    api_request = 'application/json' \n    \n    urlpe = \"https://\" + pe_server + \":\" + pe_port + \"/orchestrator/v1/command/task\"\n    \n    headers = {\n       'X-Authentication': pe_token,\n       'Content-Type': api_request\n       }\n\n    data = '{ \"environment\" : \"%s\", \"task\" : \"exec\" ,\"description\" : \"%s\" ,\"params\" : {\"command\" : \"%s\" },\"scope\" : {\"nodes\" : [\"%s\"]}}' % (env,description,command,node)\n    \n    response = requests.post(urlpe, headers=headers, data=data, verify=False)\n    \n    if victor_ops_token == \"\":\n        \n        print >> sys.stderr, \"No VictorOps Account Setup\"\n        return\n        \n    else:\n    \n        url = \"https://alert.victorops.com/integrations/generic/20131114/alert/\" + victor_ops_token + \"\"\n        \n        \n        data = dict(\n            message_type=dropdown_list,\n            monitoring_tool='Puppet Tasks',\n            state_message=command,\n            job_description=description,\n            entity_id=alert_entity_id,\n            view_report=data,\n            pe_server=pe_server,\n            pe_port=pe_port,\n            node=node\n        )\n        \n        \n        search_name = helper.get_events()\n        entity_id = \"Puppet Tasks Alert: %s\" % search_name\n        \n        view_report = helper.get_param('results_link')\n        \n        helper.log_info(\"Alert action Puppet Tasks VictorOps Alert Action started.\")\n        \n      \n        response = helper.send_http_request(url, \n                                        method, \n                                        parameters=None, \n                                        payload=json.dumps(data),\n                                        headers=headers, \n                                        cookies=None, \n                                        verify=False, \n                                        cert=None,\n                                        timeout=None, \n                                        use_proxy=True)\n        \n        \n        body = json.dumps(data)\n        \n        req = urllib2.Request(url, body, {\"Content-Type\": \"application/json\"})\n        \n        try:\n            res = urllib2.urlopen(req)\n            body = res.read()\n            print >> sys.stderr, \"INFO VictorOps server responded with HTTP status=%d\" % res.code\n            print >> sys.stderr, \"DEBUG VictorOps server response: %s\" % json.dumps(body)\n            return 200 <= res.code < 300\n        except urllib2.HTTPError, e:\n            print >> sys.stderr, \"ERROR Error sending message: %s (%s)\" % (e, str(dir(e)))\n            print >> sys.stderr, \"ERROR Server response: %s\" % e.read()\n            return False\n         \n        \n        return 0\n", "label": "Puppet Task - Exec", "description": "Puppet Enterprise - Exec", "uuid": "28eb14f2c29344bb9d40b7f5270a0b12", "short_name": "puppet_task_exec", "largeIcon": "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAAEPUlEQVR4Xu2bSWgUQRSGv57JJJOYOMaEGKOIoHhwicGg4EYMbqC4HLx78+JBBEUPLoiKCh7UsyCKiKIHFVFEUBI8CC4hCnFDUWOCS0zcssw4i9S0Ex2n27G6p5PpmapjqCoq3/zvvar3XmuxWCyGGqYENAXo3+pQgNJYjwKkANlzsMYKikUh+Bmw6b81DQpHgeaxd8phXG0MaKAbbq+DULe9o/lGwsKL4B9tb59hXG0C6BPcXAzBj/aO5gvAkmbwV9rbZxhXK0CWnPSAUlCCm1JQRhXkLYayyYCWvG0kCN+epUa9vPNBgemw8AJ4CpMBfX0OzWsgOpD89/wDNAMaLoG3KBnElyfQtBIiCpACFJeGWRQLKAXppqMADboQuTBfOgXqj6Y66d6XcG8jREN57qRFeP87ggkk4nEb+5F6o8i7KCb7JvKWQOMNKJsouzJr5suZmJVj16yE2r3grwKR/nDZcB6QqAlU1sOcE6581TsPKK4YDWpWQO0e8Fe7SknGgILd0LwWgl1yBhH9AZE+4zVCSWMWwJzjIBJpLhlpUq5RuX8j3AdtB+HtpZT3rL6RB8atghm7XeOTMl/VGOiCuxug6y5gAnjscph1BHxlWW9umQckTCnUA4/2Qvu51NRIQkljl8C0nXpSX2poOlhPgdQqq5MzDyhxEvFcadkE75shFjE+X2EFeP1yZy8ohbmnYMR4uXUWZzsHSCgp/B1ad0D7BYvHM1jmK4dFV6F0Qub2/MdOzgEaVNJHeLgLOq/oTxK7I+cAxZXUCw+2Qudlu3gg5wAJJAJSXzs0rc5ArS3XTCyhGVHKvrUM+jvsqSgnFSSQKEBphKEAKUD2fIdSkFKQUpA9AkpB1vnFL4od0LQKgh+s7yNW5uQ9KByE1m3w5rw9ODkJSESvtv3w+qx6rCbJQ5iV6Bt6tAdenTRJnFkQVM6YWOgztG6HjmsQCxuTKLCQGfSNgvlnXZwwSyTK2g7Bi+OgeQ3gaFA5H6bvgMJyORmJ4qN/jItTrsLntGyGdzfNlVPVAPXHoKjCpUl7kfkTSS7ZTvtwPzw+DK/OmJR9NKhqhLoDUDIu6+EIaZsUDnvgznoQfkRmCKfc36kn6f+uw8dL0LP1wmFRpSvgmAPKVJ/0IFwNqpfCzH1QXOMaOEMDSCgnMBXmnYbiahk9ZsVc55sXqhZB3UEoGe8q5SR+HWcBicbzxutQNikr1GDlEJKANJN7jQh4BpfBvGvBK50EMw+Ax5f8Y/S+gZYtqX2KeQdI9Un/Eobqk/59QTH8bl4BUoD+N6LJRbFALTRcNPja5yk0rVBf+yCal8rr9F7DP4foTey5rz6o+19ZDs7LuzAvS0gBSkNMAcpnQKLIF/oka1TJ8wsC0HgN/BX29hnG1cZhPhrRW+ZsN1169OrDEPU0O8HR+S5XJ049hHsqQGlgK0AKkD17VApKw+8nJnofVoDVGFIAAAAASUVORK5CYII=", "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAACP0lEQVRYR+2YT0gUURzHP+PYtq6ZRlRqYFKEBIGyQUIXmyy0BM+dOwReunWoiwcJOtm5KPBip+oQxBrRWtfC/mAnizIXOtUerMxRZ168fRO70MwwKzO777ADA3PY+b3Pft/vz/eNIYQQaHQZ+gI5NvxeAUIEa0pBaw8YTYlpWlZo9SO8HAd3I3ixtiMw9BjMdC2AlmD+PLjrwYvtOgpncmC2NIDg9FNI74ONIsyPgHCgrgqNLkBLJ6x/h7msBkDWM0jvB/sH5M8B9VYIsyJxHfXc2gvWHOxo0ySpDRO6x+DErcRKv9yHfi3Dq8vg+PQhsQlrBZVHsnH2XISBm2CmYleqDCRcryn6dGp3C95fg8IjwFD3gWEYvAPmzlihos8yOVoWp+DLjFJJzuTuC9Bx3B+oox86raphowPJ0HI7X0/AtxwYUqmQ6/Al6J9KGKgEZcPbq1B4qAmQxPh0FxYnG0DBCjQUCssOdxPeXYev9zXIIQnzRlbYg3CrK1ETL3vZgz7cgM/3yo2xawTaj/krtScLXWcT6kP/RsfyrDc6gL2DcGoWmuO1sxXDdQUWrvibfLlVP5dAbKl/fHAcstOxw8jQFaeOCCa/NFQtOHkbmjNVb0eUF0KAvKleiuKqWJlDYOUg1R4l9rZ+Eww09ESZfLsIL8Y0sLDamfzhvGfyi/Dc0uDUYWaU55FGzFlT+VDXc5lfStYcKD8Kwg6ujpoCOX9gVTY/r8T9sORXj919Nfocs62uEf9L1Zn8+Nf/L+Jf1FqHpO3Qv68AAAAASUVORK5CYII="}]}}